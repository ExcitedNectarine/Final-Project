[VERTEX]
#version 330 core

layout (location = 0) in vec3 in_position;
layout (location = 1) in vec2 in_uv;
layout (location = 2) in vec3 in_normal;

uniform mat4 projection;
uniform mat4 view;
uniform mat4 transform;

out vec2 out_uv;
out vec3 out_normal;
out vec3 out_frag_pos;

void main()
{
	out_uv = in_uv;
	out_normal = mat3(transpose(inverse(transform))) * in_normal;
	out_frag_pos = vec3(transform * vec4(in_position, 1.0));
	
	gl_Position = projection * view * vec4(out_frag_pos, 1.0);
}

[FRAGMENT]
#version 330 core
#define MAX_LIGHTS 128

struct Light
{
	vec3 position;
	vec3 colour;
	float radius;
};

uniform sampler2D texture;
uniform vec3 ambient;
uniform Light lights[MAX_LIGHTS];

in vec2 out_uv;
in vec3 out_normal;
in vec3 out_frag_pos;

void main()
{
	vec3 normal = normalize(out_normal);
	vec3 total_light = ambient;
	vec4 pixel = texture2D(texture, out_uv);
	
	float distance;
	float attenuation;
	float diff;
	vec3 diffuse;
	vec3 direction;
	
	for (int i = 0; i < MAX_LIGHTS; i++)
	{
		direction = normalize(lights[i].position - out_frag_pos);
		diff = max(dot(normal, direction), 0.0);
		diffuse = diff * vec3(pixel) * lights[i].colour;
		
		distance = length(lights[i].position - out_frag_pos);
		attenuation = clamp(lights[i].radius / distance, 0.0, 1.0);
		
		total_light += diffuse * attenuation * int(distance < lights[i].radius);
	}
	
	gl_FragColor = pixel * vec4(total_light, 1.0);
}